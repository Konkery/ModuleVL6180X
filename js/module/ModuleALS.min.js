const ClassBaseVL6180=require("./ModuleVL6180");class ClassALS{constructor(_opt){this._ALS=_opt,this._Illuminance=void 0,this._Ee=new(require("https://raw.githubusercontent.com/Nicktonious/ModuleVL6180X/fork-Nikita/js/module/ClassEventEmitter.min.js")),this._RangeInterval=null,this._ALS_MIN_TIME=this._ALS.ALS_MIN_TIME,this._CalibrOpt={k:1,a:0}}static get ERROR_CODE_ARG_VALUE(){return this._ALS_MIN_TIME}static get ERROR_MSG_ARG_VALUE(){return`ERROR>> invalid data. ClassID: ${this.name}`}get Illuminance(){return this._Range}set Illuminance(_val){this._Illuminance=_val*this._CalibrOpt.k+this._CalibrOpt.a}UpdateIlluminance(){this._ALS.UpdateIlluminance(illuminance=>{this.Illuminance=illuminance,this._Ee&&this._Ee.emit("illuminanceUpdate",[this.Illuminance])})}StartIlluminanceMeasures(period){period=period>=this._ALS_MIN_TIME?period:this._ALS_MIN_TIME;let alsInterval=setInterval(()=>{this._ALS.UpdateIlluminance()},period);this._ALSInterval=alsInterval}StopIlluminanceMeasures(){clearInterval(this._ALSInterval),this._ALSInterval=null}OnUpdate(handler){this._Ee.on("illuminanceUpdate",illuminance=>{handler&&handler.apply(this,[illuminance])})}ResetOnUpdate(){this._Ee.reset("illuminanceUpdate")}Calibrate(_k,_a){if("number"!=typeof _k||"number"!=typeof _a)throw new err(ClassALS.ERROR_MSG_ARG_VALUE,ClassALS.ERROR_CODE_ARG_VALUE);this._CalibrOpt.k=_k,this._CalibrOpt.a=_a}ResetCalibration(){this._CalibrOpt.k=1,this._CalibrOpt.a=0}}
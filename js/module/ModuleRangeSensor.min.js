const ClassBaseVL6180=require("./ModuleVL6180");class ClassRangeSensor{constructor(_opt){this._RangeSensor=_opt,this._Range=void 0,this._Ee=new(require("https://raw.githubusercontent.com/Nicktonious/ModuleVL6180X/fork-Nikita/js/module/ClassEventEmitter.min.js")),this._RangeInterval=null,this._RANGE_MIN_TIME=this._RangeSensor.RANGE_MIN_TIME,this._CalibrOpt={k:1,a:0}}static get ERROR_CODE_ARG_VALUE(){return 10}static get ERROR_MSG_ARG_VALUE(){return`ERROR>> invalid data. ClassID: ${this.name}`}get Range(){return this._Range}get RangeInSm(){return this._Range/10}get RangeInM(){return this._Range/1e3}get RangeInInch(){return this._Range/25.4}set Range(_val){this._Range=_val*this._CalibrOpt.k+this._CalibrOpt.a}UpdateRange(){this._RangeSensor.UpdateRange(range=>{this.Range=range,this._Ee&&this._Ee.emit("rangeChange",[range])})}StartRangeMeasures(period){period=period>=this._RANGE_MIN_TIME?period:this._RANGE_MIN_TIME;let rangeInterval=setInterval(()=>{this.UpdateRange()},period);this._RangeInterval=rangeInterval}StopRangeMeasures(){clearInterval(this._RangeInterval),this._RangeInterval=null}OnUpdate(handler){this._Ee.on("rangeChange",range=>{handler&&handler.apply(this,[range])})}ResetOnUpdate(){this._Ee.reset("rangeChange")}Calibrate(_k,_a){if("number"!=typeof _k||"number"!=typeof _a)throw new err(ClassRangeSensor.ERROR_MSG_ARG_VALUE,ClassRangeSensor.ERROR_CODE_ARG_VALUE);this._CalibrOpt.k=_k,this._CalibrOpt.a=_a}ResetCalibration(){this._CalibrOpt.k=1,this._CalibrOpt.a=0}}